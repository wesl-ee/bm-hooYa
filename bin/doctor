#!/usr/bin/perl
use strict;
use Getopt::Long 'HelpMessage';
use DBI;
use File::Find;
use File::MimeInfo 'mimetype';
use Digest::MD5::File 'file_md5_hex';
use Text::Table;

GetOptions(
	'help' => sub { HelpMessage(0) },

	# Import directory options
	'missing' => \my $missing,
	'scan=s' => \my $scan,
) or HelpMessage(1);

use constant {
	FG_BLACK => '[0;30m',
	FG_RED => '[0;31m',
	FG_GREEN => '[0;32m',
	FG_YELLOW => '[0;33m',
	FG_BLUE => '[0;34m',
	FG_MAGENTA => '[0;35m',
	FG_CYAN => '[0;36m',
	FG_WHITE => '[0;37m',
	FG_DEFAULT => '[0;39m',

	BG_BLACK => '[0;40m',
	BG_RED => '[0;41m',
	BG_GREEN => '[0;42m',
	BG_YELLOW => '[0;43m',
	BG_BLUE => '[0;44m',
	BG_MAGENTA => '[0;45m',
	BG_CYAN => '[0;46m',
	BG_WHITE => '[0;47m',
	BG_DEFAULT => '[0;49m',

	TEXT_RESET => '[0;0m',
	TEXT_BOLD => '[0;1m',
	TEXT_STANDOUT => '[0;3m',
	TEXT_BLINK => '[0;5m',
	TEXT_REVERSE => '[0;7m',
};

sub die_error { die FG_RED . @_[0] . FG_DEFAULT . "\n"; }
sub notify_success { print FG_GREEN . @_[0] . FG_DEFAULT . "\n"; }
sub notify_warn { print FG_YELLOW . @_[0] . FG_DEFAULT . "\n"; }

# Read SQL settings from the config file
my ($CONFIG_MYSQL_HOOYA_HOST,
$CONFIG_MYSQL_HOOYA_USER,
$CONFIG_MYSQL_HOOYA_PASSWORD,
$CONFIG_MYSQL_HOOYA_DATABASE);

# Definitely going to need to make a config file in /etc
my $incfile =  '/var/http/hub/hooYa/includes/config.php';
open(FILE, $incfile);
while (<FILE>) {
	$CONFIG_MYSQL_HOOYA_HOST = $1 if (/["']CONFIG_MYSQL_HOOYA_HOST["'], ["'](.+)["']/);
	$CONFIG_MYSQL_HOOYA_USER = $1 if (/"CONFIG_MYSQL_HOOYA_USER", ["'](.+)["']/);
	$CONFIG_MYSQL_HOOYA_PASSWORD = $1 if (/["']CONFIG_MYSQL_HOOYA_PASSWORD["'], ["'](.+)["']/);
	$CONFIG_MYSQL_HOOYA_DATABASE = $1 if (/["']CONFIG_MYSQL_HOOYA_DATABASE["'], ["'](.+)["']/);
}
close(FILE);

# SQL
my $dsn = "DBI:mysql:database=" . $CONFIG_MYSQL_HOOYA_DATABASE
. ";host=" . $CONFIG_MYSQL_HOOYA_HOST;
my $dbh = DBI->connect(
	$dsn,
	$CONFIG_MYSQL_HOOYA_USER,
	$CONFIG_MYSQL_HOOYA_PASSWORD,
	{'PrintError' => 0}
);
if (!defined $dbh) {
	die DBI::errstr;
}
my $sth;

if (defined $missing) {
	$sth = $dbh->prepare("SELECT `Id`, `Path` FROM `Files`");
	$sth->execute or die DBI::errstr;
	notify_warn "The following files are not located at their paths:";
	while (my $row = $sth->fetchrow_hashref) {
		if (!-f $row->{'Path'}) {
			print $row->{'Path'} . "\n";
		}
	}
}
if (defined $scan) {
	$sth = $dbh->prepare("SELECT `Path` FROM `Files` WHERE `Id`=?");
	my ($row, $md5);
	find(sub {
		return if !-f;
		my $md5 = file_md5_hex($File::Find::name);
		my $path = $_;
		print "$path, $md5";die;
		$sth->execute($md5) or die_error DBI::errstr;
		$row = $sth->fetchrow_hashref;
		print "SELECT `Path` FROM `Files` WHERE `Id`=" . $md5;

		if ($row->{'Path'} != $File::Find::name) {
			print 'a';
		}
	}, $scan);
}
