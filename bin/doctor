#!/usr/bin/perl
use strict;
use Getopt::Long 'HelpMessage';
use DBI;
use File::Find;
use File::MimeInfo 'mimetype';
use Digest::MD5::File 'file_md5_hex';
use JSON::PP;
use Text::Table;

GetOptions(
	'help' => sub { HelpMessage(0) },

	# Import directory options
	'missing' => \my $missing,
	'cleandb' => \my $clean,
	'scan=s' => \my $scan,
	'fixprop' => \my $fixprop,
) or HelpMessage(1);

use constant {
	FG_BLACK => '[0;30m',
	FG_RED => '[0;31m',
	FG_GREEN => '[0;32m',
	FG_YELLOW => '[0;33m',
	FG_BLUE => '[0;34m',
	FG_MAGENTA => '[0;35m',
	FG_CYAN => '[0;36m',
	FG_WHITE => '[0;37m',
	FG_DEFAULT => '[0;39m',

	BG_BLACK => '[0;40m',
	BG_RED => '[0;41m',
	BG_GREEN => '[0;42m',
	BG_YELLOW => '[0;43m',
	BG_BLUE => '[0;44m',
	BG_MAGENTA => '[0;45m',
	BG_CYAN => '[0;46m',
	BG_WHITE => '[0;47m',
	BG_DEFAULT => '[0;49m',

	TEXT_RESET => '[0;0m',
	TEXT_BOLD => '[0;1m',
	TEXT_STANDOUT => '[0;3m',
	TEXT_BLINK => '[0;5m',
	TEXT_REVERSE => '[0;7m',
};

sub die_error { die FG_RED . @_[0] . FG_DEFAULT . "\n"; }
sub notify_success { print FG_GREEN . @_[0] . FG_DEFAULT . "\n"; }
sub notify_warn { print FG_YELLOW . @_[0] . FG_DEFAULT . "\n"; }

# Read SQL settings from the config file
my ($CONFIG_MYSQL_HOOYA_HOST,
$CONFIG_MYSQL_HOOYA_USER,
$CONFIG_MYSQL_HOOYA_PASSWORD,
$CONFIG_MYSQL_HOOYA_DATABASE);

# Definitely going to need to make a config file in /etc
my $incfile =  '/var/http/hub/hooYa/includes/config.php';
open(FILE, $incfile);
while (<FILE>) {
	$CONFIG_MYSQL_HOOYA_HOST = $1 if (/["']CONFIG_MYSQL_HOOYA_HOST["'], ["'](.+)["']/);
	$CONFIG_MYSQL_HOOYA_USER = $1 if (/"CONFIG_MYSQL_HOOYA_USER", ["'](.+)["']/);
	$CONFIG_MYSQL_HOOYA_PASSWORD = $1 if (/["']CONFIG_MYSQL_HOOYA_PASSWORD["'], ["'](.+)["']/);
	$CONFIG_MYSQL_HOOYA_DATABASE = $1 if (/["']CONFIG_MYSQL_HOOYA_DATABASE["'], ["'](.+)["']/);
}
close(FILE);

# SQL
my $dsn = "DBI:mysql:database=" . $CONFIG_MYSQL_HOOYA_DATABASE
. ";host=" . $CONFIG_MYSQL_HOOYA_HOST;
my $dbh = DBI->connect(
	$dsn,
	$CONFIG_MYSQL_HOOYA_USER,
	$CONFIG_MYSQL_HOOYA_PASSWORD,
	{'PrintError' => 0}
);
if (!defined $dbh) {
	die DBI::errstr;
}
my $sth;

if (defined $missing) {
	$sth = $dbh->prepare("SELECT `Id`, `Path` FROM `Files`");
	$sth->execute or die DBI::errstr;
	notify_warn "The following files are not located at their paths:";
	while (my $row = $sth->fetchrow_hashref) {
		if (!-f $row->{'Path'}) {
			print $row->{'Path'} . "\n"
			. "Delete this from the hooYa (Y/n): ";

			my $r = <STDIN>;
			chomp $r;
			if ($r eq 'Y') {
				my $sth2 = $dbh->prepare("DELETE FROM TagMap WHERE FileId=?");
				$sth2->execute($row->{'Id'});
				$sth2 = $dbh->prepare("DELETE FROM Files WHERE Id=?");
				$sth2->execute($row->{'Id'});
			}
		}
	}
}

if (defined $scan) {
	$sth = $dbh->prepare("SELECT `Path` FROM `Files` WHERE `Id`=?");
	my $sth2 = $dbh->prepare("UPDATE `Files` SET `Path`=? WHERE `Id`=?");
	my ($row, $md5);
	find(sub {
		return if !-f;
		my $md5 = file_md5_hex($File::Find::name);
		my $path = $_;
		$sth->execute($md5) or die_error DBI::errstr;
		$row = $sth->fetchrow_hashref;
		if (!defined $row || $row->{'Path'} eq $File::Find::name) {
			return;
		}
		print $row->{'Path'} . '\n\t-> ' . $File::Find::name . "\n";
		$sth2->execute($File::Find::name, $md5) or die_error DBI::errstr;
	}, $scan);
}
if (defined $fixprop) {
	my ($row, $file);
	$sth = $dbh->prepare("SELECT `Files`.`Id`, `Path` FROM"
	. "`Files`, `single_image`"
	. " WHERE Files.`Id`=`single_image`.Id");
	my $sth2;

	$sth->execute() or die_error DBI::errstr;
	while ($row = $sth->fetchrow_hashref) {
		# Detecting colors
		$file = $row->{'Path'};
		my @out =  `convert $file +dither -colors 6 -define histogram:unique-colors=true -format "%c" histogram:info:`;
		my @colors;
		foreach(@out) {
			# For sRGBA, ignore the alpha channel
			if (/#([A-Fa-f0-9]{6})[A-Fa-f0-9]{2}/) {
				push @colors, "#$1";
			}
			# For RGB, capture the whole string
			elsif (/(#[A-Fa-f0-9]{6})/) {
				push @colors, $1;
			}
			# No more than 6 colors for each picture
			if (@colors >= 6) { last; }
		}
		if (!@colors) {
			print $row->{'Id'} . " could not get a palette for $file\n"; next;
		}
		print "$file @colors\n";
		$sth2 = $dbh->prepare("UPDATE `single_image`"
		. " SET `Colors`=?"
		. " WHERE `Id`=?");
		$sth2->execute(encode_json(\@colors), $row->{'Id'}) or die_error DBI::errstr;
	}

	$sth->execute() or die_error DBI::errstr;
	while ($row = $sth->fetchrow_hashref) {
		# Detecting image resolutions
		$file = $row->{'Path'};
		my $out =  `convert $file -print "Size: %wx%h\n" /dev/null`;
		chomp $out;
		if (!($out =~ /(\d+)x(\d+)/)) {
			print "Could not dimensions for $file\n"; next;
		}
		my $width = $1; my $height = $2;
		$sth2 = $dbh->prepare("UPDATE `single_image` SET"
		. " `Width`=?, `Height`=?"
		. " WHERE `Id`=?");

		print "$file ($width" . "x$height)\n";
		$sth2->execute($width, $height, $row->{'Id'}) or die_error DBI::errstr;
	}
}
if (defined $clean) {
	# Cleaning out any tags which are not associated w/ any files
	my $i;
	my @qprepare;
	my $query;
	$sth = $dbh->prepare("SELECT Member FROM Tags WHERE Member"
	. " NOT IN (SELECT Member FROM TagMap, Tags WHERE TagId=Tags.Id)");
	$sth->execute or die DBI::errstr;
	my $query = 'DELETE FROM `Tags` WHERE';
	while (my $row = $sth->fetchrow_hashref) {
		$query .= " OR" if ($i++);
		$query .= " `Member`=?";
		push @qprepare, $row->{'Member'};
	}
	if ($i) {
		my $sth = $dbh->prepare($query);
		$sth->execute(@qprepare) or die_error DBI::errstr;
	}

	# Cleaning out any unused namespaces
	undef $i;
	undef @qprepare;
	undef $query;
	$sth = $dbh->prepare("SELECT Space FROM Tags WHERE Space"
	. " NOT IN (SELECT Space FROM TagMap, Tags WHERE TagId=Tags.Id)");
	$sth->execute or die DBI::errstr;
	my $query = 'DELETE FROM `Tags` WHERE';
	while (my $row = $sth->fetchrow_hashref) {
		$query .= " OR" if ($i++);
		$query .= " `Space`=?";
		push @qprepare, $row->{'Space'};
	}
	if ($i) {
		my $sth = $dbh->prepare($query);
		$sth->execute(@qprepare) or die_error DBI::errstr;
	}
}
