#!/usr/bin/perl
use strict;
use DBI;
use File::Find;
use File::MimeInfo 'mimetype';

# Cute formatting; ANSI escape codes
use constant HOOYA_VERSION => '0.6';
use constant {
	FG_BLACK => '[0;30m',
	FG_RED => '[0;31m',
	FG_GREEN => '[0;32m',
	FG_YELLOW => '[0;33m',
	FG_BLUE => '[0;34m',
	FG_MAGENTA => '[0;35m',
	FG_CYAN => '[0;36m',
	FG_WHITE => '[0;37m',
	FG_DEFAULT => '[0;39m',

	BG_BLACK => '[0;40m',
	BG_RED => '[0;41m',
	BG_GREEN => '[0;42m',
	BG_YELLOW => '[0;43m',
	BG_BLUE => '[0;44m',
	BG_MAGENTA => '[0;45m',
	BG_CYAN => '[0;46m',
	BG_WHITE => '[0;47m',
	BG_DEFAULT => '[0;49m',

	TEXT_RESET => '[0;0m',
	TEXT_BOLD => '[0;1m',
	TEXT_STANDOUT => '[0;3m',
	TEXT_BLINK => '[0;5m',
	TEXT_REVERSE => '[0;7m',
};
sub die_error { die FG_RED . @_[0] . FG_DEFAULT . "\n"; }
sub notify_success { print FG_GREEN . @_[0] . FG_DEFAULT . "\n"; }
sub notify_warn { print FG_YELLOW . @_[0] . FG_DEFAULT . "\n"; }

# Read SQL settings from the config file
my ($CONFIG_MYSQL_HOOYA_HOST,
$CONFIG_MYSQL_HOOYA_USER,
$CONFIG_MYSQL_HOOYA_PASSWORD,
$CONFIG_MYSQL_HOOYA_DATABASE);

# Definitely going to need to make a config file in /etc
my $incfile =  '/var/http/hub/hooYa/includes/config.php';
open(FILE, $incfile);
while (<FILE>) {
	$CONFIG_MYSQL_HOOYA_HOST = $1 if (/["']CONFIG_MYSQL_HOOYA_HOST["'], ["'](.+)["']/);
	$CONFIG_MYSQL_HOOYA_USER = $1 if (/"CONFIG_MYSQL_HOOYA_USER", ["'](.+)["']/);
	$CONFIG_MYSQL_HOOYA_PASSWORD = $1 if (/["']CONFIG_MYSQL_HOOYA_PASSWORD["'], ["'](.+)["']/);
	$CONFIG_MYSQL_HOOYA_DATABASE = $1 if (/["']CONFIG_MYSQL_HOOYA_DATABASE["'], ["'](.+)["']/);
}
close(FILE);

# SQL
my $dsn = "DBI:mysql:database=" . $CONFIG_MYSQL_HOOYA_DATABASE
. ";host=" . $CONFIG_MYSQL_HOOYA_HOST;

my $dbh = DBI->connect(
	$dsn,
	$CONFIG_MYSQL_HOOYA_USER,
	$CONFIG_MYSQL_HOOYA_PASSWORD,
	{'PrintError' => 0}
);
if (!defined $dbh) {
	die_error DBI::errstr;
}

my $sth;
my ($total, $n);

$sth = $dbh->prepare("SELECT COUNT(*) AS Total FROM `Tags`");
$sth->execute();
$total = ($sth->fetchrow_hashref())->{'Total'};
$sth = $dbh->prepare("SELECT `Id`, CONCAT(`Space`,':',`Member`) AS tag FROM `Tags`");
$sth->execute();
# print "TagX,\"X Frequency\",TagY,\"Y Frequency given X\",P(Y|X)\n";

while (my $ref = $sth->fetchrow_hashref()) {
	my $tag = $ref->{'tag'};
	my $id = $ref->{'Id'};
	my $sth2 = $dbh->prepare("SELECT COUNT(*) As Freq"
	. " FROM TagMap WHERE TagId=$id GROUP By TagId");
	$sth2->execute();
	if ($sth2->rows == 0) { next; }
	my $freq = $sth2->fetchrow_hashref()->{'Freq'};
	print "$tag ($freq files)\n";

	$sth2 = $dbh->prepare("SELECT CONCAT(Space, ':', Member) AS Tag, COUNT(*) AS Freq"
	. " FROM Tags, TagMap WHERE TagId=Tags.Id AND FileId IN"
	. " (SELECT FileId FROM TagMap, Tags WHERE TagId=Tags.Id"
	. " AND CONCAT(Space,':',Member)='$tag')"
	. " AND CONCAT(Space,':',Member)!='$tag' GROUP By Tag"
	. " ORDER BY Freq DESC");
        $sth2->execute();
        my $rows = $sth2->rows;
	while (my $ref2 = $sth2->fetchrow_hashref()) {
		my $freq2 = $ref2->{'Freq'};
		my $tag2 = $ref2->{'Tag'};
		my $prob = $freq2/$freq;
		print "  ";
		if (--$rows == 0) { print "â””" }
#		if (--$rows == 0) { print "\\" }
		else { print "â”œ" }
#		else { print "|-" }
		print "â”€â”€â”€â”€ $tag2 ($freq2/$freq)\n";
#		print "---$tag2 ($freq2/$freq)\n";
#		printf "\"$tag\",$freq,\"$tag2\",$freq2,%.3f\n", $prob;
	}
}
